# # #
# loggers
ActiveRecord::Base.logger     = Logger.new STDOUT
ActiveRecord::Base.clear_reloadable_connections!

ActionController::Base.logger = Logger.new STDOUT

# # # 
# named routes and helpers
include Rails.application.routes.url_helpers
default_url_options[:host] = Rails.application.class.parent_name.downcase

#include ActionView::Helpers           # All Rails helpers
#include ApplicationController._helpers # Your own helpers
#
# unfortunately that breaks some functionality (e.g. the named route helpers above)
#  so, look at actionpack/lib/action_view/helpers.rb and choose the helpers you need
#  (and which don't break anything), e.g.
include ActionView::Helpers::DebugHelper
include ActionView::Helpers::NumberHelper
# include ActionView::Helpers::RawOutputHelper # doesn't seem to exist in 3.1
include ActionView::Helpers::SanitizeHelper
include ActionView::Helpers::TagHelper
include ActionView::Helpers::TextHelper
include ActionView::Helpers::TranslationHelper

# # #
# route list view helpers (requires hirb)

#### hirb view for a route
###class Hirb::Helpers::Route < Hirb::Helpers::AutoTable
###  def self.render(output, options = {})
###    super( output.requirements.map{ |k,v|
###      [k, v.inspect]
###    }, options.merge({
###      :headers     => [output.name || '', "#{ output.verb || 'ANY' } #{ output.path }"],
###      :unicode     => true,
###      :description => nil,
###    }) )
###  end
###end
###Hirb.add_view ActionDispatch::Routing::Route, :class => Hirb::Helpers::Route
###
#### short and long route list
###def routes(long_output = false)
###  if long_output
###    Rails.application.routes.routes.each{ |e|
###      puts Hirb::Helpers::Route.render(e)
###    }
###    true
###  else
###    Hirb::Console.render_output Rails.application.routes.routes.map{|e|
###      [e.name || '', e.verb || 'ANY', e.path]
###    },{
###      :class   => Hirb::Helpers::AutoTable,
###      :headers => %w<name verb path>,
###    }
###  end
###end
###
#### get a specific route via index or name
###def route(index_or_name)
###  route = case index_or_name
###  when Integer
###    Rails.application.routes.routes[ index_or_name ]
###  when Symbol # named route
###    Rails.application.routes.named_routes.get index_or_name
###  end
###end
###
#### access to routeset for easy recognize / generate
###def r 
###  ActionController::Routing::Routes
###end

def ripl?; defined?(Ripl) && Ripl.instance_variable_get(:@shell); end

# # #
# rails prompt
if ripl?
  module Ripl::RailsPrompt
    def prompt
      @prompt = "#{ Rails.application.class.parent_name.downcase }(#{ Rails.env[0...3] })> "
      super
    end
  end
  Ripl::Shell.include Ripl::RailsPrompt
end

# # #
# plain sql
def sql(query)
  ActiveRecord::Base.connection.select_all(query)
end

# work specific user lookup
def cguser(username)
  CgUser::User.find_by_username(username)
end

# # #
# misc db helpers (requires hirb)
module DatabaseHelpers
  extend self

  def tables
    Hirb::Console.render_output ActiveRecord::Base.connection.tables.map{|e|[e]},{
      :class   => Hirb::Helpers::AutoTable,
      :headers => %w<tables>,
    }
    true
  end

  def table(which)
    Hirb::Console.render_output ActiveRecord::Base.connection.columns(which).map{ |e|
      [e.name, e.type, e.sql_type, e.limit, e.default, e.scale, e.precision, e.primary, e.null]
    },{
      :class   => Hirb::Helpers::AutoTable,
      :headers => %w<name type sql_type limit default scale precision primary null>,
    }
    true
  end

  def counts
    Hirb::Console.render_output ActiveRecord::Base.connection.tables.map{|e|
      [e, ActiveRecord::Base.connection.select_value("SELECT COUNT(*) FROM #{e}")]
    },{
      :class   => Hirb::Helpers::AutoTable,
      :headers => %w<table count>,
    }
    true
  end

  # ...
end
def db; DatabaseHelpers; end

# return an array of AR model constants 
def self.models
  ActiveRecord::Base.
    send(:subclasses).
    map { |model| model.name.constantize }
end
 
# return an array of controller constants 
def self.controllers
  Rails.application.routes.routes.
    select  { |r| r.defaults[:controller].present? }.
    uniq    { |r| r.defaults[:controller] }.
    sort_by { |r| r.defaults[:controller] }.
    map     { |r| "#{r.defaults[:controller].split('/').map { |x| x.capitalize }.join("::").camelize }Controller".constantize }
end
