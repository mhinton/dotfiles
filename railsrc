require 'logger'

# hirb: some nice stuff for Rails
begin
  require 'hirb'
  HIRB_LOADED = true
rescue LoadError
  HIRB_LOADED = false
end

def loud_logger
  enable_hirb
  set_logger_to Logger.new(STDOUT)
end

def quiet_logger
  disable_hirb
  set_logger_to nil
end

def set_logger_to(logger)
  ActiveRecord::Base.logger = logger
  ActiveRecord::Base.clear_reloadable_connections!
end

def enable_hirb
  if HIRB_LOADED
    Hirb::Formatter.dynamic_config['ActiveRecord::Base']
    Hirb.enable
  else
    puts "hirb is not loaded"
  end
end

def disable_hirb
  if HIRB_LOADED
    Hirb.disable
  else
    puts "hirb is not loaded"
  end
end


# # # 
# named routes and helpers
include Rails.application.routes.url_helpers
default_url_options[:host] = Rails.application.class.parent_name.downcase

#include ActionView::Helpers           # All Rails helpers
#include ApplicationController._helpers # Your own helpers
#
# unfortunately that breaks some functionality (e.g. the named route helpers above)
#  so, look at actionpack/lib/action_view/helpers.rb and choose the helpers you need
#  (and which don't break anything), e.g.
include ActionView::Helpers::DebugHelper
include ActionView::Helpers::NumberHelper
# include ActionView::Helpers::RawOutputHelper # doesn't seem to exist in 3.1
include ActionView::Helpers::SanitizeHelper
include ActionView::Helpers::TagHelper
include ActionView::Helpers::TextHelper
include ActionView::Helpers::TranslationHelper

# # #
# plain sql
def sql(query)
  ActiveRecord::Base.connection.select_all(query)
end

# work specific user lookup
def cguser(username)
  CgUser::User.find_by_username(username)
end

# return an array of AR model constants 
def self.models
  ActiveRecord::Base.
    send(:subclasses).
    map { |model| model.name.constantize }
end
 
# return an array of controller constants 
def self.controllers
  Rails.application.routes.routes.
    select  { |r| r.defaults[:controller].present? }.
    uniq    { |r| r.defaults[:controller] }.
    sort_by { |r| r.defaults[:controller] }.
    map     { |r| "#{r.defaults[:controller].split('/').map { |x| x.capitalize }.join("::").camelize }Controller".constantize }
end

def show_routes(match = nil)
  Rails.application.reload_routes!
  all_routes = Rails.application.routes.routes
 
  require 'rails/application/route_inspector'
  inspector = Rails::Application::RouteInspector.new
 
  routes = inspector.format(all_routes, ENV['CONTROLLER'])
 
  ansi_bold       = "\033[1m"
  ansi_reset      = "\033[0m"
 
  if (match)
    match = match.to_s
    puts routes.grep(/#{match}/).map { |r|
      r.gsub!(match, "#{ansi_bold}#{match}#{ansi_reset}")
    }.join("\n")
 
  else
    puts routes.join "\n"
  end
end
